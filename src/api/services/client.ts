//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @return OK
   */

  protected async transformOptions(options: RequestInit): Promise<RequestInit> {
    options.headers = {
      ...options.headers,
      Accept: "text/html application/json", // Set the Accept header to text/html
    };
    return Promise.resolve(options);
  }

  productCategoriesAll(): Promise<ListProductCategoryResponse[]> {
    let url_ = this.baseUrl + "/api/v1/product-categories";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processProductCategoriesAll(_response);
      });
  }

  protected processProductCategoriesAll(
    response: Response
  ): Promise<ListProductCategoryResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ListProductCategoryResponse.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ListProductCategoryResponse[]>(null as any);
  }

  /**
   * @return OK
   */
  productCategories(id: Ulid): Promise<ProductCategoryResponse> {
    let url_ = this.baseUrl + "/api/v1/product-categories/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processProductCategories(_response);
      });
  }

  protected processProductCategories(
    response: Response
  ): Promise<ProductCategoryResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductCategoryResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException(
          "Not Found",
          status,
          _responseText,
          _headers,
          result404
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ProductCategoryResponse>(null as any);
  }

  /**
   * @return OK
   */
  productsAll(): Promise<ListProductResponse[]> {
    let url_ = this.baseUrl + "/api/v1/products";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processProductsAll(_response);
      });
  }

  protected processProductsAll(
    response: Response
  ): Promise<ListProductResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ListProductResponse.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ListProductResponse[]>(null as any);
  }

  /**
   * @return OK
   */
  products(id: Ulid): Promise<ProductResponse> {
    let url_ = this.baseUrl + "/api/v1/products/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processProducts(_response);
      });
  }

  protected processProducts(response: Response): Promise<ProductResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException(
          "Not Found",
          status,
          _responseText,
          _headers,
          result404
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ProductResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  offset(
    body?: ProductOffsetPageStaticQuery | undefined
  ): Promise<ProductResponseOffsetPageResponse> {
    let url_ = this.baseUrl + "/api/v1/products/offset";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processOffset(_response);
      });
  }

  protected processOffset(
    response: Response
  ): Promise<ProductResponseOffsetPageResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ProductResponseOffsetPageResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ProductResponseOffsetPageResponse>(null as any);
  }

  /**
   * @param top (optional)
   * @return OK
   */
  bestSellers(top?: number | undefined): Promise<ProductResponse[]> {
    let url_ = this.baseUrl + "/api/v1/products/best-sellers?";
    if (top === null) throw new Error("The parameter 'top' cannot be null.");
    else if (top !== undefined)
      url_ += "Top=" + encodeURIComponent("" + top) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processBestSellers(_response);
      });
  }

  protected processBestSellers(response: Response): Promise<ProductResponse[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ProductResponse.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ProductResponse[]>(null as any);
  }

  /**
   * @param body (optional)
   * @return OK
   */
  login(body?: UserLoginRequest | undefined): Promise<UserLoginResponse> {
    let url_ = this.baseUrl + "/api/v1/users/login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processLogin(_response);
      });
  }

  protected processLogin(response: Response): Promise<UserLoginResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserLoginResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserLoginResponse>(null as any);
  }

  /**
   * @param body (optional)
   * @return Created
   */
  register(
    body?: UserRegisterRequest | undefined
  ): Promise<UserRegisterResponse> {
    let url_ = this.baseUrl + "/api/v1/users/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json-patch+json",
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processRegister(_response);
      });
  }

  protected processRegister(response: Response): Promise<UserRegisterResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        let resultData201 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result201 = UserRegisterResponse.fromJS(resultData201);
        return result201;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserRegisterResponse>(null as any);
  }

  /**
   * (Auth)
   * @return OK
   */
  users(id: string): Promise<GetUserResponse> {
    let url_ = this.baseUrl + "/api/v1/users/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.transformOptions(options_)
      .then((transformedOptions_) => {
        return this.http.fetch(url_, transformedOptions_);
      })
      .then((_response: Response) => {
        return this.processUsers(_response);
      });
  }

  protected processUsers(response: Response): Promise<GetUserResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetUserResponse.fromJS(resultData200);
        return result200;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 401) {
      return response.text().then((_responseText) => {
        return throwException("Unauthorized", status, _responseText, _headers);
      });
    } else if (status === 403) {
      return response.text().then((_responseText) => {
        return throwException("Forbidden", status, _responseText, _headers);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<GetUserResponse>(null as any);
  }
}

export class GetUserResponse implements IGetUserResponse {
  id?: string;
  email?: string | undefined;

  constructor(data?: IGetUserResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.email = _data["email"];
    }
  }

  static fromJS(data: any): GetUserResponse {
    data = typeof data === "object" ? data : {};
    let result = new GetUserResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["email"] = this.email;
    return data;
  }
}

export interface IGetUserResponse {
  id?: string;
  email?: string | undefined;
}

export class ListProductCategoryResponse
  implements IListProductCategoryResponse
{
  id?: string;
  name?: string | undefined;
  parentId?: string;
  icon?: string | undefined;
  visible?: string | undefined;
  children?: ListProductCategoryResponse[] | undefined;

  constructor(data?: IListProductCategoryResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.name = _data["name"];
      this.parentId = _data["parentId"]
        ? Ulid.fromJS(_data["parentId"])
        : <any>undefined;
      this.icon = _data["icon"];
      this.visible = _data["visible"];
      if (Array.isArray(_data["children"])) {
        this.children = [] as any;
        for (let item of _data["children"])
          this.children!.push(ListProductCategoryResponse.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ListProductCategoryResponse {
    data = typeof data === "object" ? data : {};
    let result = new ListProductCategoryResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["name"] = this.name;
    data["parentId"] = this.parentId ? this.parentId : <any>undefined;
    data["icon"] = this.icon;
    data["visible"] = this.visible;
    if (Array.isArray(this.children)) {
      data["children"] = [];
      for (let item of this.children) data["children"].push(item.toJSON());
    }
    return data;
  }
}

export interface IListProductCategoryResponse {
  id?: string;
  name?: string | undefined;
  parentId?: string;
  icon?: string | undefined;
  visible?: string | undefined;
  children?: ListProductCategoryResponse[] | undefined;
}

export class ListProductResponse implements IListProductResponse {
  id?: string;
  categoryId?: string;
  costPrice?: number;
  name?: string | undefined;
  productCd?: string | undefined;
  sellingPrice?: number;
  stock?: number;
  supplierId?: string | undefined;
  txDesc?: string | undefined;
  unit?: string | undefined;
  weight?: number;

  constructor(data?: IListProductResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.categoryId = _data["categoryId"]
        ? Ulid.fromJS(_data["categoryId"])
        : <any>undefined;
      this.costPrice = _data["costPrice"];
      this.name = _data["name"];
      this.productCd = _data["productCd"];
      this.sellingPrice = _data["sellingPrice"];
      this.stock = _data["stock"];
      this.supplierId = _data["supplierId"];
      this.txDesc = _data["txDesc"];
      this.unit = _data["unit"];
      this.weight = _data["weight"];
    }
  }

  static fromJS(data: any): ListProductResponse {
    data = typeof data === "object" ? data : {};
    let result = new ListProductResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["categoryId"] = this.categoryId ? this.categoryId : <any>undefined;
    data["costPrice"] = this.costPrice;
    data["name"] = this.name;
    data["productCd"] = this.productCd;
    data["sellingPrice"] = this.sellingPrice;
    data["stock"] = this.stock;
    data["supplierId"] = this.supplierId;
    data["txDesc"] = this.txDesc;
    data["unit"] = this.unit;
    data["weight"] = this.weight;
    return data;
  }
}

export interface IListProductResponse {
  id?: string;
  categoryId?: string;
  costPrice?: number;
  name?: string | undefined;
  productCd?: string | undefined;
  sellingPrice?: number;
  stock?: number;
  supplierId?: string | undefined;
  txDesc?: string | undefined;
  unit?: string | undefined;
  weight?: number;
}

export class OffsetPage implements IOffsetPage {
  pageSize!: number;
  pageNumber!: number;

  constructor(data?: IOffsetPage) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageSize = _data["pageSize"];
      this.pageNumber = _data["pageNumber"];
    }
  }

  static fromJS(data: any): OffsetPage {
    data = typeof data === "object" ? data : {};
    let result = new OffsetPage();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageSize"] = this.pageSize;
    data["pageNumber"] = this.pageNumber;
    return data;
  }
}

export interface IOffsetPage {
  pageSize: number;
  pageNumber: number;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === "object" ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class ProductAttachmentResponse implements IProductAttachmentResponse {
  id?: string;
  name?: string | undefined;
  originName?: string | undefined;
  link?: string | undefined;
  size?: number;

  constructor(data?: IProductAttachmentResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.name = _data["name"];
      this.originName = _data["originName"];
      this.link = _data["link"];
      this.size = _data["size"];
    }
  }

  static fromJS(data: any): ProductAttachmentResponse {
    data = typeof data === "object" ? data : {};
    let result = new ProductAttachmentResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["name"] = this.name;
    data["originName"] = this.originName;
    data["link"] = this.link;
    data["size"] = this.size;
    return data;
  }
}

export interface IProductAttachmentResponse {
  id?: string;
  name?: string | undefined;
  originName?: string | undefined;
  link?: string | undefined;
  size?: number;
}

export class ProductCategoryResponse implements IProductCategoryResponse {
  id?: string;
  name?: string | undefined;
  parentId?: string;
  icon?: string | undefined;
  visible?: string | undefined;
  products?: ProductResponse[] | undefined;

  constructor(data?: IProductCategoryResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.name = _data["name"];
      this.parentId = _data["parentId"]
        ? Ulid.fromJS(_data["parentId"])
        : <any>undefined;
      this.icon = _data["icon"];
      this.visible = _data["visible"];
      if (Array.isArray(_data["products"])) {
        this.products = [] as any;
        for (let item of _data["products"])
          this.products!.push(ProductResponse.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ProductCategoryResponse {
    data = typeof data === "object" ? data : {};
    let result = new ProductCategoryResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["name"] = this.name;
    data["parentId"] = this.parentId ? this.parentId : <any>undefined;
    data["icon"] = this.icon;
    data["visible"] = this.visible;
    if (Array.isArray(this.products)) {
      data["products"] = [];
      for (let item of this.products) data["products"].push(item.toJSON());
    }
    return data;
  }
}

export interface IProductCategoryResponse {
  id?: string;
  name?: string | undefined;
  parentId?: string;
  icon?: string | undefined;
  visible?: string | undefined;
  products?: ProductResponse[] | undefined;
}

export class ProductOffsetPageStaticQuery
  implements IProductOffsetPageStaticQuery
{
  page?: OffsetPage;
  filter?: ProductStaticFilter;
  sortBy?: ProductStaticSortBy;

  constructor(data?: IProductOffsetPageStaticQuery) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.page = _data["page"]
        ? OffsetPage.fromJS(_data["page"])
        : <any>undefined;
      this.filter = _data["filter"]
        ? ProductStaticFilter.fromJS(_data["filter"])
        : <any>undefined;
      this.sortBy = _data["sortBy"]
        ? ProductStaticSortBy.fromJS(_data["sortBy"])
        : <any>undefined;
    }
  }

  static fromJS(data: any): ProductOffsetPageStaticQuery {
    data = typeof data === "object" ? data : {};
    let result = new ProductOffsetPageStaticQuery();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["page"] = this.page ? this.page.toJSON() : <any>undefined;
    data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
    data["sortBy"] = this.sortBy ? this.sortBy.toJSON() : <any>undefined;
    return data;
  }
}

export interface IProductOffsetPageStaticQuery {
  page?: OffsetPage;
  filter?: ProductStaticFilter;
  sortBy?: ProductStaticSortBy;
}

export class ProductResponse implements IProductResponse {
  id?: string;
  categoryId?: string;
  costPrice?: number;
  name?: string | undefined;
  productCd?: string | undefined;
  sellingPrice?: number;
  stock?: number;
  supplierId?: string | undefined;
  txDesc?: string | undefined;
  unit?: string | undefined;
  weight?: number;
  translations?: ProductTranslationResponse[] | undefined;
  attachments?: ProductAttachmentResponse[] | undefined;

  constructor(data?: IProductResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.categoryId = _data["categoryId"]
        ? Ulid.fromJS(_data["categoryId"])
        : <any>undefined;
      this.costPrice = _data["costPrice"];
      this.name = _data["name"];
      this.productCd = _data["productCd"];
      this.sellingPrice = _data["sellingPrice"];
      this.stock = _data["stock"];
      this.supplierId = _data["supplierId"];
      this.txDesc = _data["txDesc"];
      this.unit = _data["unit"];
      this.weight = _data["weight"];
      if (Array.isArray(_data["translations"])) {
        this.translations = [] as any;
        for (let item of _data["translations"])
          this.translations!.push(ProductTranslationResponse.fromJS(item));
      }
      if (Array.isArray(_data["attachments"])) {
        this.attachments = [] as any;
        for (let item of _data["attachments"])
          this.attachments!.push(ProductAttachmentResponse.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ProductResponse {
    data = typeof data === "object" ? data : {};
    let result = new ProductResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["categoryId"] = this.categoryId ? this.categoryId : <any>undefined;
    data["costPrice"] = this.costPrice;
    data["name"] = this.name;
    data["productCd"] = this.productCd;
    data["sellingPrice"] = this.sellingPrice;
    data["stock"] = this.stock;
    data["supplierId"] = this.supplierId;
    data["txDesc"] = this.txDesc;
    data["unit"] = this.unit;
    data["weight"] = this.weight;
    if (Array.isArray(this.translations)) {
      data["translations"] = [];
      for (let item of this.translations)
        data["translations"].push(item.toJSON());
    }
    if (Array.isArray(this.attachments)) {
      data["attachments"] = [];
      for (let item of this.attachments)
        data["attachments"].push(item.toJSON());
    }
    return data;
  }
}

export interface IProductResponse {
  id?: string;
  categoryId?: string;
  costPrice?: number;
  name?: string | undefined;
  productCd?: string | undefined;
  sellingPrice?: number;
  stock?: number;
  supplierId?: string | undefined;
  txDesc?: string | undefined;
  unit?: string | undefined;
  weight?: number;
  translations?: ProductTranslationResponse[] | undefined;
  attachments?: ProductAttachmentResponse[] | undefined;
}

export class ProductResponseOffsetPageResponse
  implements IProductResponseOffsetPageResponse
{
  readonly items?: ProductResponse[] | undefined;
  readonly totalItemsCount?: number;
  readonly totalPages?: number;
  readonly currentPage?: number;
  readonly itemsFrom?: number;
  readonly itemsTo?: number;
  readonly hasPreviousPage?: boolean;
  readonly hasNextPage?: boolean;

  constructor(data?: IProductResponseOffsetPageResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        (<any>this).items = [] as any;
        for (let item of _data["items"])
          (<any>this).items!.push(ProductResponse.fromJS(item));
      }
      (<any>this).totalItemsCount = _data["totalItemsCount"];
      (<any>this).totalPages = _data["totalPages"];
      (<any>this).currentPage = _data["currentPage"];
      (<any>this).itemsFrom = _data["itemsFrom"];
      (<any>this).itemsTo = _data["itemsTo"];
      (<any>this).hasPreviousPage = _data["hasPreviousPage"];
      (<any>this).hasNextPage = _data["hasNextPage"];
    }
  }

  static fromJS(data: any): ProductResponseOffsetPageResponse {
    data = typeof data === "object" ? data : {};
    let result = new ProductResponseOffsetPageResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    data["totalItemsCount"] = this.totalItemsCount;
    data["totalPages"] = this.totalPages;
    data["currentPage"] = this.currentPage;
    data["itemsFrom"] = this.itemsFrom;
    data["itemsTo"] = this.itemsTo;
    data["hasPreviousPage"] = this.hasPreviousPage;
    data["hasNextPage"] = this.hasNextPage;
    return data;
  }
}

export interface IProductResponseOffsetPageResponse {
  items?: ProductResponse[] | undefined;
  totalItemsCount?: number;
  totalPages?: number;
  currentPage?: number;
  itemsFrom?: number;
  itemsTo?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;
}

export class ProductStaticFilter implements IProductStaticFilter {
  productCategoryId?: string;
  name?: string | undefined;

  constructor(data?: IProductStaticFilter) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.productCategoryId = _data["productCategoryId"]
        ? _data["productCategoryId"]
        : <any>undefined;
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): ProductStaticFilter {
    data = typeof data === "object" ? data : {};
    let result = new ProductStaticFilter();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["productCategoryId"] = this.productCategoryId
      ? this.productCategoryId
      : <any>undefined;
    data["name"] = this.name;
    return data;
  }
}

export interface IProductStaticFilter {
  productCategoryId?: string;
  name?: string | undefined;
}

export class ProductStaticSortBy implements IProductStaticSortBy {
  name?: SortDirection;
  schoolCode?: SortDirection;
  schoolLevelCode?: SortDirection;
  thenName?: SortDirection;
  thenSchoolCode?: SortDirection;
  thenSchoolLevelCode?: SortDirection;

  constructor(data?: IProductStaticSortBy) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
      this.schoolCode = _data["schoolCode"];
      this.schoolLevelCode = _data["schoolLevelCode"];
      this.thenName = _data["thenName"];
      this.thenSchoolCode = _data["thenSchoolCode"];
      this.thenSchoolLevelCode = _data["thenSchoolLevelCode"];
    }
  }

  static fromJS(data: any): ProductStaticSortBy {
    data = typeof data === "object" ? data : {};
    let result = new ProductStaticSortBy();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    data["schoolCode"] = this.schoolCode;
    data["schoolLevelCode"] = this.schoolLevelCode;
    data["thenName"] = this.thenName;
    data["thenSchoolCode"] = this.thenSchoolCode;
    data["thenSchoolLevelCode"] = this.thenSchoolLevelCode;
    return data;
  }
}

export interface IProductStaticSortBy {
  name?: SortDirection;
  schoolCode?: SortDirection;
  schoolLevelCode?: SortDirection;
  thenName?: SortDirection;
  thenSchoolCode?: SortDirection;
  thenSchoolLevelCode?: SortDirection;
}

export class ProductTranslationResponse implements IProductTranslationResponse {
  id?: string;
  languageCode?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;

  constructor(data?: IProductTranslationResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.languageCode = _data["languageCode"];
      this.name = _data["name"];
      this.description = _data["description"];
    }
  }

  static fromJS(data: any): ProductTranslationResponse {
    data = typeof data === "object" ? data : {};
    let result = new ProductTranslationResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["languageCode"] = this.languageCode;
    data["name"] = this.name;
    data["description"] = this.description;
    return data;
  }
}

export interface IProductTranslationResponse {
  id?: string;
  languageCode?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
}

export enum SortDirection {
  _0 = 0,
  _1 = 1,
}

export class Ulid implements IUlid {
  readonly random?: string | undefined;
  readonly time?: Date;

  constructor(data?: IUlid) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      (<any>this).random = _data["random"];
      (<any>this).time = _data["time"]
        ? new Date(_data["time"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): Ulid {
    data = typeof data === "object" ? data : {};
    let result = new Ulid();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["random"] = this.random;
    data["time"] = this.time ? this.time.toISOString() : <any>undefined;
    return data;
  }
}

export interface IUlid {
  random?: string | undefined;
  time?: Date;
}

export class UserLoginRequest implements IUserLoginRequest {
  username!: string;
  password!: string;

  constructor(data?: IUserLoginRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): UserLoginRequest {
    data = typeof data === "object" ? data : {};
    let result = new UserLoginRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["username"] = this.username;
    data["password"] = this.password;
    return data;
  }
}

export interface IUserLoginRequest {
  username: string;
  password: string;
}

export class UserLoginResponse implements IUserLoginResponse {
  id?: string;
  accessToken?: string | undefined;

  constructor(data?: IUserLoginResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.accessToken = _data["accessToken"];
    }
  }

  static fromJS(data: any): UserLoginResponse {
    data = typeof data === "object" ? data : {};
    let result = new UserLoginResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["accessToken"] = this.accessToken;
    return data;
  }
}

export interface IUserLoginResponse {
  id?: string;
  accessToken?: string | undefined;
}

export class UserRegisterRequest implements IUserRegisterRequest {
  email?: string | undefined;
  password?: string | undefined;
  confirmPassword?: string | undefined;

  constructor(data?: IUserRegisterRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.email = _data["email"];
      this.password = _data["password"];
      this.confirmPassword = _data["confirmPassword"];
    }
  }

  static fromJS(data: any): UserRegisterRequest {
    data = typeof data === "object" ? data : {};
    let result = new UserRegisterRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["email"] = this.email;
    data["password"] = this.password;
    data["confirmPassword"] = this.confirmPassword;
    return data;
  }
}

export interface IUserRegisterRequest {
  email?: string | undefined;
  password?: string | undefined;
  confirmPassword?: string | undefined;
}

export class UserRegisterResponse implements IUserRegisterResponse {
  id?: string;
  accessToken?: string | undefined;

  constructor(data?: IUserRegisterResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"] ? _data["id"] : <any>undefined;
      this.accessToken = _data["accessToken"];
    }
  }

  static fromJS(data: any): UserRegisterResponse {
    data = typeof data === "object" ? data : {};
    let result = new UserRegisterResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id ? this.id : <any>undefined;
    data["accessToken"] = this.accessToken;
    return data;
  }
}

export interface IUserRegisterResponse {
  id?: string;
  accessToken?: string | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
